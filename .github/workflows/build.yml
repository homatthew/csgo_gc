name: Build

on:
  push:
    branches: [ "master" ]
    tags: [ "v*" ]  # Triggers on tags starting with 'v'
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v4

    - name: Cache sccache
      uses: actions/cache@v4.2.3
      with:
        path: ~/.cache/sccache
        key: ${{ runner.os }}-sccache-${{ hashFiles('**/*', '!.github/workflows/**') }}-${{ matrix.build_type }}
        restore-keys: |
          ${{ runner.os }}-sccache-
        enableCrossOsArchive: true

    - name: Set SCCACHE_DIR
      run: echo "SCCACHE_DIR=$HOME/.cache/sccache" >> $GITHUB_ENV

    - if: matrix.os != 'windows-latest'
      name: Run sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.6

    - if: matrix.os == 'ubuntu-latest'
      name: Dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo apt-get update
        sudo apt install --yes --no-install-recommends gcc-multilib g++-multilib

    - if: matrix.os == 'ubuntu-latest'
      name: Build Linux
      run: |
        mkdir ${{ github.workspace }}/release
        cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target csgo csgo_gc
        cmake -B ${{ github.workspace }}/build_ds -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32 -DCMAKE_ASM_FLAGS=-m32 -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build_ds --config ${{ matrix.build_type }} --target srcds csgo_gc

    - if: matrix.os == 'macos-latest'
      name: Build MacOS
      run: |
        mkdir ${{ github.workspace }}/release
        cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DCMAKE_OSX_ARCHITECTURES=x86_64 -DFUNCHOOK_CPU=x86 -DCMAKE_C_COMPILER_LAUNCHER=sccache -DCMAKE_CXX_COMPILER_LAUNCHER=sccache -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target csgo csgo_gc

    - if: matrix.os == 'windows-latest'
      name: Build Windows
      run: |
        mkdir ${{ github.workspace }}/release
        cmake -A Win32 -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }} -DOUTDIR=${{ github.workspace }}/release
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --target csgo srcds csgo_gc

    - name: Package
      shell: bash
      run: |
        cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/release/
        cp $GITHUB_WORKSPACE/LICENSE $GITHUB_WORKSPACE/release/
        cp $GITHUB_WORKSPACE/examples/config.txt $GITHUB_WORKSPACE/release/csgo_gc/
        cp $GITHUB_WORKSPACE/examples/inventory.txt $GITHUB_WORKSPACE/release/csgo_gc/
        cp $GITHUB_WORKSPACE/examples/unusual_loot_lists.txt $GITHUB_WORKSPACE/release/csgo_gc/

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: csgo_gc-${{ matrix.os }}
        path: ${{ github.workspace }}/release

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4  # Add this step to clone the repository
    - name: Calculate next patch version
      id: bump_patch
      run: |
        git fetch --tags
        latest=$(git tag --list 'v*' --sort=-v:refname | head -n 1)
        if [[ "$latest" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          major=${BASH_REMATCH[1]}
          minor=${BASH_REMATCH[2]}
          patch=${BASH_REMATCH[3]}
          new_patch=$((patch + 1))
          new_tag="v${major}.${minor}.${new_patch}"
        else
          new_tag="v1.0.0"
        fi
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
        echo "NEW_VERSION=$new_tag" >> $GITHUB_ENV

    - name: Create and push new tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ env.NEW_VERSION }}
        git push origin ${{ env.NEW_VERSION }}
    - uses: actions/download-artifact@v4
      with:
        path: ./release

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: ./release/**/*
        tag_name: ${{ env.NEW_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
